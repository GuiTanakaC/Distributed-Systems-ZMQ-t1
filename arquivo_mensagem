# Subscribers are created with ZMQ.SUB socket types.
# A zmq subscriber can connect to many publishers.
import sys
import zmq
import time
import random
import threading
import tkinter

mensagem = "VALOR INICIAL"
meu_frame = tkinter.Frame()
label_comum = tkinter.Label(meu_frame, text=mensagem)


def tela_function():
    root = tkinter.Tk()
    meu_frame.pack()
    label_comum.pack()
    root.mainloop()
    

# criar função para pub e função para sub
# cada uma dessas funções será executada em uma thread diferente (para ser multithread)
def pub_function(port_pub, zmq_context):
    socket = zmq_context.socket(zmq.PUB)
    print("Conectando pub na porta %s\n" % port_pub)
    socket.bind("tcp://*:%s" % port_pub)

    while True:
        topic = random.randrange(9999,10005)
        topic = "*"
        messagedata = random.randrange(1,215) - 80
        print("%s %d" % (topic, messagedata))
        label_comum.config(text = str(messagedata))
        socket.send(b"%s %d" % (topic.encode(), messagedata))
        time.sleep(1)

def sub_function(port_pub, array_ports_connect, zmq_context):
    socket = zmq_context.socket(zmq.SUB)
    for port_to_subscribe in array_ports_connect:
        socket.connect("tcp://localhost:%s" % int(port_to_subscribe))
    # Aqui estamos nos inscrevendo em todos os conteúdos que tiverem a nossa porta
    # pois assim, saberemos que a mensagem é para a gente
    socket.subscribe(port_pub)
    # Aqui estamos nos inscrevendo no conteúdo que começar com *
    socket.subscribe("*")

    while True:
        string = socket.recv()
        topic, messagedata = string.split()
        print("Mensagem recebida: %s, tópico: %s\n" % (messagedata, topic))


port_pub = "5555"
ports_connect = []

# Se tivermos a porta na qual devemos rodar
if len(sys.argv) > 1:
    port_pub = sys.argv[1]
    int(port_pub)

# Portas as quais devemos ouvir (array de string)
if len(sys.argv) > 2:
    ports_connect = sys.argv[2:]


# Socket to talk to server
context = zmq.Context()

thread_pub = threading.Thread(target=pub_function, args=(port_pub, context))
thread_pub.start()

thread_sub = threading.Thread(target=sub_function, args=(port_pub, ports_connect, context))
thread_sub.start()

tela_function()


""" print("Subscribing to ports....")
for i in ports_subscribe:
    print("Subscribing to " + i)
    socketSub.connect("tcp://localhost:%s" % int(i)) """

# Subscribes to all topics you can selectively create multiple workers
# that would be responsible for reading from one or more predefined topics
# if you have used AWS SNS this is a simliar concept

""" socketSub.subscribe("*") # se o tópico da mensagem for público para todos que estiverem ouvindo
socketSub.subscribe("")
socketSub.subscribe(port_pub) # se o tópico da mensagem for pra mim (minha porta)


while True:
    # Receives a string format message
    print(socketSub.recv()) """
